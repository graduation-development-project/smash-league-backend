generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Hands {
  LEFT
  RIGHT
}

model User {
  id                            String                   @id @default(uuid())
  email                         String                   @unique
  password                      String
  name                          String
  phoneNumber                   String                   @unique
  avatarURL                     String?
  currentRefreshToken           String?
  creditsRemain                 Int?
  otp                           String?
  gender                        Gender?
  otpExpiresTime                DateTime?
  isVerified                    Boolean                  @default(false)
  teamId                        String?
  height                        Int?
  hands                         Hands?
  dateOfBirth                   DateTime?
  location                      String?
  startPlayingCompetitively     String?
  placeOfBirth                  String?
  startPlayingSport             String?
  sportAmbitions                String?
  description                   String?
  tournamentSeries              TournamentSerie[]        @relation(name: "FK_TournamentSerie_User")
  orders                        Order[]                  @relation(name: "FK_Order_User")
  teamLeaderOf                  Team[]                   @relation(name: "FK_User_TeamLeader")
  tournaments                   Tournament[]             @relation(name: "FK_Tournament_User")
  userRoles                     UserRole[]               @relation(name: "FK_User_UserRole")
  userTeams                     UserTeam[]               @relation(name: "FK_User_UserTeam")
  verifications                 UserVerification[]       @relation(name: "FK_User_UserVerification")
  notifications                 UserNotification[]       @relation(name: "FK_UserNotification_User")
  tournamentRegistrations       TournamentRegistration[] @relation(name: "FK_TournamentRegistration_User")
  tournamentRegistrationPartner TournamentRegistration[] @relation(name: "FK_TournamentRegistration_Partner")
  tournamentParticipants        TournamentParticipants[] @relation(name: "FK_TournamentParticipants_User")
  tournamentParticipantsPartner TournamentParticipants[] @relation(name: "FK_TournamentParticipants_Partner")
  teamInvitation                TeamInvitation[]         @relation(name: "FK_User_TeamInvitation")
  Reason                        Reason[]                 @relation(name: "FK_TeamMember_Reason")
  TeamRequest                   TeamRequest[]            @relation(name: "FK_TeamMember_TeamRequest")
  matchHosts                    Match[]                  @relation(name: "FK_Match_Umpire")
  TournamentUmpires             TournamentUmpires[]      @relation(name: "FK_TournamentUmpires_User")
  UserBankAccount               UserBankAccount[]        @relation(name: "FK_User_UserBankAccount")
  paybackTransaction            Transaction[]            @relation(name: "FK_User_Transaction")
  transactions                  Transaction[]            @relation(name: "FK_Transaction_Owner")
  feedback                      Feedback[]               @relation(name: "FK_Feedback_User")
  paybackFees                   PaybackFee[]             @relation(name: "FK_PaybackFee_User")
  userReport                    UserReport[]             @relation(name: "FK_UserReport_User")
  umpireDegrees                 UmpireDegree[]           @relation(name: "FK_UmpireDegree_User")
  reportToUser                  UserReport[]             @relation(name: "FK_UserReport_ReportUser")
}

enum Gender {
  MALE
  FEMALE
}

enum TypeOfUmpireDegree {
  UmpireDegree
  HealthCertificate
  ForeignLanguageCertificate
}

model UmpireDegree {
  id           String             @id @default(uuid())
  typeOfDegree TypeOfUmpireDegree
  degreeTitle  String
  degree       String[]
  description  String?
  userId       String
  user         User               @relation(name: "FK_UmpireDegree_User", fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model UserVerification {
  id           String           @id @default(uuid())
  userId       String
  user         User             @relation("FK_User_UserVerification", fields: [userId], references: [id])
  IDCardFront  String?
  IDCardBack   String?
  cardPhoto    String?
  role         String
  status       InvitationStatus @default(PENDING)
  createdAt    DateTime         @default(now())
  rejectReason Reason?          @relation(name: "FK_UserVerification_Reason")
}

model Role {
  id              String           @id @default(uuid())
  roleName        String
  rolePermissions RolePermission[] @relation("FK_Role_RolePermission")
  userRoles       UserRole[]       @relation("FK_Role_UserRole")
}

model UserRole {
  userId String
  roleId String
  role   Role   @relation("FK_Role_UserRole", fields: [roleId], references: [id])
  user   User   @relation("FK_User_UserRole", fields: [userId], references: [id])

  @@id([userId, roleId])
}

model Permission {
  id              String           @id @default(uuid())
  name            String
  rolePermissions RolePermission[] @relation("FK_Permission_RolePermission")
}

model RolePermission {
  roleId       String
  permissionId String
  permission   Permission @relation("FK_Permission_RolePermission", fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation("FK_Role_RolePermission", fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model Team {
  id                     String                   @id @default(uuid())
  teamName               String
  description            String?
  logo                   String?
  status                 TeamStatus               @default(ACTIVE)
  teamLeaderId           String
  teamLeader             User                     @relation("FK_User_TeamLeader", fields: [teamLeaderId], references: [id], onDelete: Cascade)
  userTeams              UserTeam[]               @relation("FK_Team_UserTeam")
  tournamentRegistration TournamentRegistration[] @relation("FK_TournamentPRegistration_TournamentRegistrationTeam")
  invitations            TeamInvitation[]         @relation("FK_Team_TeamInvitation")
  Reason                 Reason[]                 @relation("FK_Team_Reason")
  TeamRequest            TeamRequest[]            @relation("FK_Team_TeamRequest")
  tournamentParticipants TournamentParticipants[] @relation("FK_TournamentParticipants_Team")
}

enum TeamStatus {
  ACTIVE
  INACTIVE
  WAITING_DISBAND
}

model UserTeam {
  userId String
  teamId String
  team   Team     @relation("FK_Team_UserTeam", fields: [teamId], references: [id], onDelete: Cascade)
  user   User     @relation("FK_User_UserTeam", fields: [userId], references: [id], onDelete: Cascade)
  role   TeamRole @default(MEMBER)

  @@id([userId, teamId])
}

enum TeamRole {
  LEADER
  MEMBER
}

model TeamInvitation {
  id            String           @id @default(uuid())
  teamId        String
  invitedUserId String
  status        InvitationStatus @default(PENDING)

  team         Team           @relation("FK_Team_TeamInvitation", fields: [teamId], references: [id], onDelete: Cascade)
  invitedUser  User           @relation("FK_User_TeamInvitation", fields: [invitedUserId], references: [id], onDelete: Cascade)
  notification Notification[] @relation("FK_TeamInvitation_Notification")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model NotificationType {
  id                 String         @id @default(uuid())
  typeOfNotification String
  notifications      Notification[] @relation("FK_Notification_NotificationType")
}

model Notification {
  id                       String                  @id @default(uuid())
  title                    String
  message                  String
  typeId                   String?
  type                     NotificationType?       @relation("FK_Notification_NotificationType", fields: [typeId], references: [id], onDelete: Cascade)
  userNotification         UserNotification[]      @relation("FK_UserNotification_Notification")
  teamInvitationId         String?
  teamInvitation           TeamInvitation?         @relation("FK_TeamInvitation_Notification", fields: [teamInvitationId], references: [id], onDelete: Cascade)
  teamRequestId            String?
  teamRequest              TeamRequest?            @relation("FK_TeamRequest_Notification", fields: [teamRequestId], references: [id], onDelete: Cascade)
  tournamentRegistrationId String?
  tournamentRegistration   TournamentRegistration? @relation("FK_TournamentRegistration_Notification", fields: [tournamentRegistrationId], references: [id], onDelete: Cascade)
}

model UserNotification {
  id             String       @id @default(uuid())
  userId         String
  notificationId String
  user           User         @relation(name: "FK_UserNotification_User", fields: [userId], references: [id], onDelete: Cascade)
  notification   Notification @relation(name: "FK_UserNotification_Notification", fields: [notificationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@unique([userId, notificationId])
}

model TournamentSerie {
  id                      String       @id @default(uuid())
  tournamentSerieName     String
  serieBackgroundImageURL String
  belongsToUserId         String
  belongsToUser           User         @relation(name: "FK_TournamentSerie_User", fields: [belongsToUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tournaments             Tournament[] @relation(name: "FK_Tournament_TournamentSerie")
}

model Province {
  id          String       @id @default(uuid())
  province    String
  tournaments Tournament[] @relation(name: "FK_Tournament_Province")
}

model District {
  id          String       @id @default(uuid())
  district    String
  tournaments Tournament[] @relation(name: "FK_Tournament_District")
}

model Ward {
  id          String       @id @default(uuid())
  ward        String
  tournaments Tournament[] @relation(name: "FK_Tournament_Ward")
}

enum RequirementType {
  Selection
  FillIn
}

// model DemoJsonType {
//   id   String @id @default(uuid())
//   name Json
// }

model Requirement {
  id                     String           @id @default(uuid())
  requirementName        String
  requirementDescription String
  tournamentId           String?
  tournamentEventId      String?
  requirementType        RequirementType
  tournament             Tournament?      @relation(name: "FK_Requirement_Tournament", fields: [tournamentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tournamentEvent        TournamentEvent? @relation(name: "FK_Requirement_TournamentEvent", fields: [tournamentEventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Tournament {
  id                       String                   @id
  name                     String
  shortName                String?
  description              String
  introduction             String?
  organizerId              String
  contactPhone             String
  contactEmail             String
  mainColor                String?
  backgroundTournament     String
  provinceId               String?
  province                 Province?                @relation(name: "FK_Tournament_Province", fields: [provinceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  districtId               String?
  district                 District?                @relation(name: "FK_Tournament_District", fields: [districtId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  wardId                   String?
  ward                     Ward?                    @relation(name: "FK_Tournament_Ward", fields: [wardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  location                 String
  registrationOpeningDate  DateTime
  registrationClosingDate  DateTime
  drawDate                 DateTime
  startDateFirstTime       DateTime
  countUpdateOccurTime     Int                      @default(0)
  startDate                DateTime
  endDateFirstTime         DateTime
  endDate                  DateTime
  checkInBeforeStart       DateTime
  numberOfCourt            Int
  registrationFeePerPerson Int
  registrationFeePerPair   Int?
  maxEventPerPerson        Int
  status                   TournamentStatus
  protestFeePerTime        Int
  prizePool                Int
  hasMerchandise           Boolean
  numberOfMerchandise      Int?
  merchandiseImages        String[]                 @default([])
  requiredAttachment       String[]
  isRecruit                Boolean
  numberOfUmpires          Int?                     @default(0)
  tournamentSerieId        String?
  tournamentSerie          TournamentSerie?         @relation(name: "FK_Tournament_TournamentSerie", fields: [tournamentSerieId], references: [id], onDelete: Cascade)
  organizer                User                     @relation(name: "FK_Tournament_User", fields: [organizerId], references: [id], onDelete: Cascade)
  tournamentPosts          TournamentPost[]         @relation(name: "FK_TournamentPost_Tournament")
  registrations            TournamentRegistration[] @relation(name: "FK_TournamentRegistration_Tournament")
  tournamentEvents         TournamentEvent[]        @relation(name: "FK_Tournament_TournamentEvent")
  TournamentParticipants   TournamentParticipants[] @relation(name: "FK_TournamentParticipants_Tournament")
  TournamentUmpires        TournamentUmpires[]      @relation(name: "FK_TournamentUmpires_Tournament")
  courts                   Court[]                  @relation(name: "FK_Court_Tournament")
  feedback                 Feedback[]               @relation(name: "FK_Feedback_Tournament")
  TournamentSponsor        TournamentSponsor[]
  paybackFees              PaybackFee[]             @relation(name: "FK_PaybackFee_Tournament")
  userReport               UserReport[]             @relation(name: "FK_UserReport_Tournament")
  tournamentRequirements   Requirement[]            @relation(name: "FK_Requirement_Tournament")
}

enum TournamentStatus {
  CREATED
  OPENING
  OPENING_FOR_REGISTRATION
  CLOSING_FOR_REGISTRATION
  DRAWING
  ON_GOING
  FINISHED
  CANCELED
}

enum TournamentEventStatus {
  CREATED
  ON_GOING
  ENDED
  CANCELED
}

model TournamentEvent {
  id                     String                   @id @default(uuid())
  tournamentEvent        BadmintonParticipantType
  fromAge                Int?                     @default(6)
  toAge                  Int?                     @default(90)
  winningPoint           Int?
  lastPoint              Int                      @default(31)
  numberOfGames          Int                      @default(3)
  typeOfFormat           TypeOfFormat
  ruleOfEventExtension   String?
  minimumAthlete         Int
  maximumAthlete         Int?
  tournamentEventStatus  TournamentEventStatus    @default(CREATED)
  championshipPrize      String
  runnerUpPrize          String
  thirdPlacePrize        String?
  championshipId         String?
  championship           TournamentParticipants?  @relation(name: "FK_Championship_TournamentParticipants", fields: [championshipId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  runnerUpId             String?
  runnerUp               TournamentParticipants?  @relation(name: "FK_RunnerUp_TournamentParticipants", fields: [runnerUpId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  thirdPlaceId           String?
  thirdPlace             TournamentParticipants?  @relation(name: "FK_ThirdPlace_TournamentParticipants", fields: [thirdPlaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tournamentId           String
  tournament             Tournament               @relation(name: "FK_Tournament_TournamentEvent", fields: [tournamentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stages                 Stage[]                  @relation(name: "FK_Stage_TournamentEvent")
  matches                Match[]                  @relation(name: "FK_Match_TournamentEvent")
  tournamentRegistration TournamentRegistration[] @relation(name: "FK_TournamentRegistration_TournamentEvent")
  tournamentParticipants TournamentParticipants[] @relation(name: "FK_TournamentParticipants_TournamentEvent")
  paybackFees            PaybackFee[]             @relation(name: "FK_PaybackFee_TournamentEvent")
  prizes                 EventPrize[]             @relation(name: "FK_TournamentEvent_EventPrize")
  requirements           Requirement[]            @relation(name: "FK_Requirement_TournamentEvent")
}

model EventPrize {
  id                String          @id @default(uuid())
  prizeName         String
  prize             String
  prizeType         PrizeType
  tournamentEventId String
  tournamentEvent   TournamentEvent @relation(name: "FK_TournamentEvent_EventPrize", fields: [tournamentEventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum PrizeType {
  ChampionshipPrize
  RunnerUpPrize
  ThirdPlacePrize
  Others
}

enum TypeOfFormat {
  SINGLE_ELIMINATION
}

enum BadmintonParticipantType {
  MENS_SINGLE
  WOMENS_SINGLE
  MENS_DOUBLE
  WOMENS_DOUBLE
  MIXED_DOUBLE
}

model Sponsor {
  id                 String              @id @default(uuid())
  name               String              @unique
  logo               String?
  website            String?
  description        String?
  tournamentSponsors TournamentSponsor[]
}

enum SponsorTier {
  DIAMOND
  PLATINUM
  GOLD
  SILVER
  BRONZE
  OTHER
}

model TournamentSponsor {
  tournamentId String
  tournament   Tournament  @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  sponsorId    String
  sponsor      Sponsor     @relation(fields: [sponsorId], references: [id], onDelete: Cascade)
  tier         SponsorTier

  @@id([tournamentId, sponsorId])
}

model Court {
  id             String     @id @default(uuid())
  courtCode      String
  tournamentId   String
  tournament     Tournament @relation(name: "FK_Court_Tournament", fields: [tournamentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  courtAvailable Boolean    @default(true)
  matches        Match[]    @relation(name: "FK_Match_Court")
}

model Stage {
  id                String          @id @default(uuid())
  stageName         String
  tournamentEventId String
  tournamentEvent   TournamentEvent @relation(name: "FK_Stage_TournamentEvent", fields: [tournamentEventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  matches           Match[]         @relation("FK_Match_Stage")
}

model Match {
  id                        String                  @id @default(uuid())
  matchStatus               MatchStatus
  leftCompetitorId          String?
  leftCompetitor            TournamentParticipants? @relation(name: "FK_Match_LeftCompetitor", fields: [leftCompetitorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rightCompetitorId         String?
  rightCompetitor           TournamentParticipants? @relation(name: "FK_Match_RightCompetitor", fields: [rightCompetitorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  leftCompetitorAttendance  Boolean?                @default(false)
  rightCompetitorAttendance Boolean?                @default(false)
  startedWhen               DateTime?
  forfeitCompetitorId       String?
  forfeitCompetitor         TournamentParticipants? @relation(name: "FK_Match_TournamentParticipants", fields: [forfeitCompetitorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  matchWonByCompetitorId    String?
  matchWonByCompetitor      TournamentParticipants? @relation(name: "FK_Match_MatchWonByCompetitor", fields: [matchWonByCompetitorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  umpireId                  String?
  umpire                    User?                   @relation(name: "FK_Match_Umpire", fields: [umpireId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stageId                   String
  stage                     Stage                   @relation(name: "FK_Match_Stage", fields: [stageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  matchNumber               Int
  isByeMatch                Boolean
  timeStart                 DateTime?
  timeEnd                   DateTime?
  courtId                   String?
  court                     Court?                  @relation(name: "FK_Match_Court", fields: [courtId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tournamentEventId         String
  tournamentEvent           TournamentEvent         @relation(name: "FK_Match_TournamentEvent", fields: [tournamentEventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  nextMatchId               String?
  nextMatch                 Match?                  @relation(name: "FK_Match_NextMatch", fields: [nextMatchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  games                     Game[]                  @relation(name: "FK_Game_Match")
  matchesPrevious           Match[]                 @relation(name: "FK_Match_NextMatch")
}

model Game {
  id                    String                  @id @default(uuid())
  leftCompetitorPoint   Int
  rightCompetitorPoint  Int
  status                GameStatus              @default(ON_GOING)
  gameNumber            Int
  lastServerId          String?
  lastServer            TournamentParticipants? @relation(name: "FK_Game_LastServer", fields: [lastServerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  currentServerId       String?
  currentServer         TournamentParticipants? @relation(name: "FK_Game_CurrentServer", fields: [currentServerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  timeStart             DateTime
  timeEnd               DateTime?
  matchId               String
  gameWonByCompetitorId String?
  gameWonByCompetitor   TournamentParticipants? @relation(name: "FK_Game_GameWonByCompetitor", fields: [gameWonByCompetitorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  match                 Match                   @relation(name: "FK_Game_Match", fields: [matchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  matchlogs             MatchLog[]              @relation(name: "FK_MatchLog_Game")
}

enum GameStatus {
  ON_GOING
  ENDED
}

enum LogType {
  WARNING
  MEDICAL
  FAULT
  MISCONDUCT
  COACHING_VIOLATION
  INTERVAL
}

model MatchLog {
  id      String   @id @default(uuid())
  log     String
  time    DateTime
  logType LogType
  gameId  String
  game    Game     @relation(name: "FK_MatchLog_Game", fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

enum MatchStatus {
  NOT_STARTED
  ON_GOING
  INTERVAL
  ENDED
}

model TournamentRegistration {
  id                          String                       @id @default(uuid())
  tournamentId                String
  userId                      String?
  tournamentEventId           String?
  tournamentEvent             TournamentEvent?             @relation(name: "FK_TournamentRegistration_TournamentEvent", fields: [tournamentEventId], references: [id], onDelete: Cascade)
  partnerId                   String? // Nullable: Used only for doubles
  registrationDocumentCreator String[]                     @default([])
  registrationDocumentPartner String[]                     @default([])
  submittedAnswers            Json?
  registrationRole            TournamentRegistrationRole
  status                      TournamentRegistrationStatus @default(PENDING) // "PENDING", "APPROVED", "REJECTED"
  createdAt                   DateTime                     @default(now())
  tournament                  Tournament?                  @relation(name: "FK_TournamentRegistration_Tournament", fields: [tournamentId], references: [id], onDelete: Cascade)
  user                        User?                        @relation(name: "FK_TournamentRegistration_User", fields: [userId], references: [id], onDelete: Cascade)
  partner                     User?                        @relation(name: "FK_TournamentRegistration_Partner", fields: [partnerId], references: [id], onDelete: SetNull)
  rejectReason                Reason?                      @relation(name: "FK_TournamentRegistration_Reason")
  fromTeamId                  String?
  fromTeam                    Team?                        @relation(name: "FK_TournamentPRegistration_TournamentRegistrationTeam", fields: [fromTeamId], references: [id], onDelete: Cascade)
  reasonId                    String?                      @unique
  Notification                Notification[]               @relation(name: "FK_TournamentRegistration_Notification")
  isDeleted                   Boolean                      @default(false)
  transaction                 Transaction[]                @relation(name: "FK_TournamentRegistration_Transaction")

  @@unique([tournamentId, userId, tournamentEventId]) // Ensure a user can register only once per event type
  @@unique([tournamentId, tournamentEventId, userId, partnerId]) // Ensure a unique pair for doubles
}

model TournamentParticipants {
  id                String            @id @default(uuid())
  tournamentId      String
  userId            String
  user              User              @relation("FK_TournamentParticipants_User", fields: [userId], references: [id], onDelete: Cascade)
  tournamentEventId String
  partnerId         String?
  partner           User?             @relation("FK_TournamentParticipants_Partner", fields: [partnerId], references: [id], onDelete: SetNull)
  tournamentEvent   TournamentEvent   @relation(name: "FK_TournamentParticipants_TournamentEvent", fields: [tournamentEventId], references: [id], onDelete: Cascade)
  tournament        Tournament        @relation(name: "FK_TournamentParticipants_Tournament", fields: [tournamentId], references: [id], onDelete: Cascade)
  fromTeamId        String?
  fromTeam          Team?             @relation(name: "FK_TournamentParticipants_Team", fields: [fromTeamId], references: [id], onDelete: Cascade)
  matches           Match[]           @relation(name: "FK_Match_TournamentParticipants")
  matchesWon        Match[]           @relation(name: "FK_Match_MatchWonByCompetitor")
  leftCompetitors   Match[]           @relation(name: "FK_Match_LeftCompetitor")
  rightCompetitors  Match[]           @relation(name: "FK_Match_RightCompetitor")
  gamesWon          Game[]            @relation(name: "FK_Game_GameWonByCompetitor")
  serverInGame      Game[]            @relation(name: "FK_Game_CurrentServer")
  lastServers       Game[]            @relation(name: "FK_Game_LastServer")
  championships     TournamentEvent[] @relation(name: "FK_Championship_TournamentParticipants")
  runnerUps         TournamentEvent[] @relation(name: "FK_RunnerUp_TournamentParticipants")
  thirdPlaces       TournamentEvent[] @relation(name: "FK_ThirdPlace_TournamentParticipants")
}

model TournamentUmpires {
  id           String     @id @default(uuid())
  tournamentId String
  userId       String
  isAvailable  Boolean    @default(true)
  tournament   Tournament @relation(name: "FK_TournamentUmpires_Tournament", fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User       @relation(name: "FK_TournamentUmpires_User", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tournamentId])
}

enum TournamentRegistrationStatus {
  PENDING
  APPROVED
  REJECTED
  ON_WAITING_REGISTRATION_FEE
}

enum TournamentRegistrationRole {
  ATHLETE
  UMPIRE
}

model Feedback {
  id           String @id @default(uuid())
  tournamentId String
  accountId    String

  rating  Int
  comment String?

  isDeleted Boolean @default(false)

  createdAt DateTime @default(now())

  tournament Tournament @relation(name: "FK_Feedback_Tournament", fields: [tournamentId], references: [id])
  account    User       @relation(name: "FK_Feedback_User", fields: [accountId], references: [id])

  @@unique([tournamentId, accountId])
}

model TournamentPost {
  id              String         @id @default(uuid())
  tournamentId    String
  createdAt       DateTime
  createdByUserId String
  updatedAt       DateTime
  updatedByUserId String
  content         String
  backgroundImage String
  contentImages   ContentImage[] @relation("FK_ContentImage_TournamentPostContentImage")
  tournament      Tournament     @relation(name: "FK_TournamentPost_Tournament", fields: [tournamentId], references: [id], onDelete: Cascade)
}

model TeamRequest {
  id              String            @id @default(uuid())
  teamMemberId    String
  teamId          String
  status          TeamRequestStatus @default(PENDING)
  type            TeamRequestType
  teamMember      User?             @relation("FK_TeamMember_TeamRequest", fields: [teamMemberId], references: [id])
  team            Team?             @relation("FK_Team_TeamRequest", fields: [teamId], references: [id])
  leaveTeamReason String?
  rejectReason    Reason?           @relation("FK_TeamRequest_Reason")
  Notification    Notification[]    @relation("FK_TeamRequest_Notification")
}

enum TeamRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TeamRequestType {
  JOIN_TEAM
  LEAVE_TEAM
  TRANSFER_TEAM_LEADER
}

model Reason {
  id                       String                  @id @default(uuid())
  userVerificationId       String?                 @unique // Can be null if rejection is for tournament
  tournamentRegistrationId String?                 @unique // Can be null if rejection is for verification
  teamRequestId            String?                 @unique
  userId                   String? // Store the user who left or was removed
  teamId                   String? // Store the team from which the user left
  reason                   String // Explanation for rejection
  status                   ReasonStatus?
  type                     ReasonType
  createdAt                DateTime                @default(now())
  userVerification         UserVerification?       @relation("FK_UserVerification_Reason", fields: [userVerificationId], references: [id], onDelete: Cascade)
  tournamentRegistration   TournamentRegistration? @relation("FK_TournamentRegistration_Reason", fields: [tournamentRegistrationId], references: [id])
  teamRequest              TeamRequest?            @relation("FK_TeamRequest_Reason", fields: [teamRequestId], references: [id])
  user                     User?                   @relation("FK_TeamMember_Reason", fields: [userId], references: [id])
  team                     Team?                   @relation("FK_Team_Reason", fields: [teamId], references: [id])
}

enum ReasonStatus {
  APPROVE
  REJECT
}

enum ReasonType {
  TOURNAMENT_REGISTRATION_REJECTION
  USER_VERIFICATION_REJECTION
  REMOVE_TEAM_MEMBER
  OUT_TEAM_REJECTION
  JOIN_TEAM_REJECTION
}

model ContentImage {
  id          String         @id @default(uuid())
  imageUrl    String
  contentId   String
  postContent TournamentPost @relation("FK_ContentImage_TournamentPostContentImage", fields: [contentId], references: [id], onDelete: Cascade)
}

model Package {
  id                      String   @id @default(uuid())
  packageName             String
  packageDetail           String
  currentDiscountByAmount Int
  price                   Int
  credits                 Int
  advantages              String[]
  isRecommended           Boolean
  isAvailable             Boolean
  orders                  Order[]  @relation(name: "FK_Order_Package")
}

model PaybackFee {
  id                String           @id @default(uuid())
  userId            String
  tournamentId      String
  tournamentEventId String?
  value             Int
  isPaid            Boolean          @default(false)
  user              User?            @relation("FK_PaybackFee_User", fields: [userId], references: [id])
  tournament        Tournament       @relation("FK_PaybackFee_Tournament", fields: [tournamentId], references: [id])
  tournamentEvent   TournamentEvent? @relation("FK_PaybackFee_TournamentEvent", fields: [tournamentEventId], references: [id])
  transaction       Transaction[]    @relation(name: "FK_TournamentRegistration_PaybackFee")
}

// model TransactionType {
//   id                  String        @id @default(uuid())
//   transactionTypeName String
//   transactions        Transaction[] @relation("FK_Transaction_TransactionTransactionType")
// }

enum TransactionType {
  BUYING_PAKCKAGE
  PAY_REGISTRATION_FEE
  PAYBACK_REGISTRATION_FEE
  PAY_REPORT_FEE
}

model Transaction {
  id                       Int                     @id @default(autoincrement())
  transactionDetail        String
  transactionPaymentLink   String?
  transactionImage         String?
  userId                   String
  user                     User                    @relation(name: "FK_Transaction_Owner", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paybackToUserId          String?
  paybackToUser            User?                   @relation(name: "FK_User_Transaction", fields: [paybackToUserId], references: [id])
  paybackImage             String?
  transactionType          TransactionType
  orderId                  String?
  order                    Order?                  @relation(name: "FK_Order_Transaction", fields: [orderId], references: [id], onDelete: Cascade)
  paybackFeeId             String?
  paybackFee               PaybackFee?             @relation(name: "FK_TournamentRegistration_PaybackFee", fields: [paybackFeeId], references: [id], onDelete: Cascade)
  tournamentRegistrationId String?
  tournamentRegistration   TournamentRegistration? @relation(name: "FK_TournamentRegistration_Transaction", fields: [tournamentRegistrationId], references: [id], onDelete: Cascade)
  reportId                 String?
  report                   UserReport?             @relation(name: "FK_UserReport_Transaction", fields: [reportId], references: [id], onDelete: Cascade)
  value                    Int
  status                   TransactionStatus
  createdAt                DateTime                @default(now())
  cancelledReason          String?
}

enum TransactionStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

model Order {
  id           String        @id @default(uuid())
  total        Int
  packageId    String
  userId       String
  user         User          @relation(name: "FK_Order_User", fields: [userId], references: [id], onDelete: Cascade)
  package      Package       @relation(name: "FK_Order_Package", fields: [packageId], references: [id], onDelete: Cascade)
  transactions Transaction[] @relation(name: "FK_Order_Transaction")
  orderStatus  OrderStatus
}

enum OrderStatus {
  PAID
  PENDING
  FAILED
}

model Bank {
  id              String            @id @default(uuid())
  name            String
  shortName       String
  code            String
  logo            String
  UserBankAccount UserBankAccount[] @relation(name: "FK_Bank_UserBankAccount")
}

model UserBankAccount {
  id            String @id @default(uuid())
  accountNumber String
  userId        String
  user          User   @relation(name: "FK_User_UserBankAccount", fields: [userId], references: [id], onDelete: Cascade)
  bankId        String
  bank          Bank   @relation(name: "FK_Bank_UserBankAccount", fields: [bankId], references: [id])

  @@unique([accountNumber, bankId, userId], name: "accountNumber_bankId_userId")
}

model UserReport {
  id             String       @id @default(uuid())
  userId         String
  tournamentId   String
  reportToUserId String?
  reason         String
  status         ReportStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  type           ReportType

  user        User          @relation(name: "FK_UserReport_User", fields: [userId], references: [id], onDelete: Cascade)
  reportUser  User?         @relation(name: "FK_UserReport_ReportUser", fields: [reportToUserId], references: [id], onDelete: Cascade)
  tournament  Tournament?   @relation(name: "FK_UserReport_Tournament", fields: [tournamentId], references: [id], onDelete: Cascade)
  transaction Transaction[] @relation(name: "FK_UserReport_Transaction")
}

enum ReportStatus {
  WAITING_PAYING_FEE
  PENDING
  HANDLED
  REJECTED
}

enum ReportType {
  TOURNAMENT
  ATHLETE
}
