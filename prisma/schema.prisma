generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String                   @id @default(uuid())
  email                         String                   @unique
  password                      String
  firstName                     String
  lastName                      String
  phoneNumber                   String                   @unique
  avatarURL                     String?
  currentRefreshToken           String?
  CreditsRemain                 Int
  otp                           String?
  otpExpiresTime                DateTime?
  isVerified                    Boolean                  @default(false)
  teamId                        String?
  team                          Team?                    @relation("FK_User_UserTeam")
  tournaments                   Tournament[]             @relation("FK_Tournament_UserTournament")
  userRoles                     UserRole[]               @relation("FK_User_UserRole")
  userTeams                     UserTeam[]               @relation("FK_User_UserTeam")
  verifications                 UserVerification[]       @relation("FK_User_UserVerification")
  transactions                  Transaction[]            @relation("FK_Transaction_UserTransaction")
  notifications                 UserNotification[]       @relation("FK_UserNotification_User")
  tournamentRegistrations       TournamentRegistration[] @relation("FK_TournamentRegistration_User")
  TournamentRegistrationPartner TournamentRegistration[] @relation("FK_TournamentRegistration_Partner")
}

model UserVerification {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation("FK_User_UserVerification", fields: [userId], references: [id])
  IDCardFront String?
  IDCardBack  String?
  cardPhoto   String?
  role        String
  isVerified  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  rejection   Rejection? @relation("FK_UserVerification_Rejection")
}

model Role {
  id              String           @id @default(uuid())
  roleName        String
  rolePermissions RolePermission[] @relation("FK_Role_RolePermission")
  userRoles       UserRole[]       @relation("FK_Role_UserRole")
}

model UserRole {
  userId String
  roleId String
  role   Role   @relation("FK_Role_UserRole", fields: [roleId], references: [id])
  user   User   @relation("FK_User_UserRole", fields: [userId], references: [id])

  @@id([userId, roleId])
}

model Permission {
  id              String           @id @default(uuid())
  name            String
  rolePermissions RolePermission[] @relation("FK_Permission_RolePermission")
}

model RolePermission {
  roleId       String
  permissionId String
  permission   Permission @relation("FK_Permission_RolePermission", fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation("FK_Role_RolePermission", fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model Team {
  id                     String                   @id @default(uuid())
  teamName               String
  teamLeaderId           String                   @unique
  teamLeader             User                     @relation("FK_User_UserTeam", fields: [teamLeaderId], references: [id], onDelete: Cascade)
  userTeams              UserTeam[]               @relation("FK_Team_UserTeam")
  tournamentRegistration TournamentRegistration[] @relation("FK_TournamentPRegistration_TournamentRegistrationTeam")
}

model UserTeam {
  userId String
  teamId String
  team   Team   @relation("FK_Team_UserTeam", fields: [teamId], references: [id], onDelete: Cascade)
  user   User   @relation("FK_User_UserTeam", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
}

model NotificationType {
  id                 String         @id @default(uuid())
  typeOfNotification String
  notifications      Notification[] @relation("FK_Notification_NotificationType")
}

model Notification {
  id      String           @id @default(uuid())
  title   String
  message String
  typeId  String
  type    NotificationType @relation("FK_Notification_NotificationType", fields: [typeId], references: [id], onDelete: Cascade)
  userNotification    UserNotification[]    @relation("FK_UserNotification_Notification")
}

model UserNotification {
  id             String       @id @default(uuid())
  userId         String
  notificationId String
  user           User         @relation(name: "FK_UserNotification_User", fields: [userId], references: [id], onDelete: Cascade)
  notification   Notification @relation(name: "FK_UserNotification_Notification", fields: [notificationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@unique([userId, notificationId])
}

model Tournament {
  id                       String                   @id @default(uuid())
  name                     String
  shortName                String
  organizerId              String
  registrationOpeningDate  DateTime
  registrationClosingDate  DateTime
  drawDate                 DateTime
  startDate                DateTime
  endDate                  DateTime
  registrationFeePerPerson Int
  registrationFeePerPair   Int?
  maxDisciplinePerPerson   Int
  status                   TournamentStatus
  protestFeePerTime        Int
  organizer                User                     @relation("FK_Tournament_UserTournament", fields: [organizerId], references: [id], onDelete: Cascade)
  tournamentPosts          TournamentPost[]         @relation("FK_TournamentPost_TournamentPostTournament")
  registrations            TournamentRegistration[] @relation("FK_TournamentRegistration_Tournament")
  tournamentDisciplines    TournamentDiscipline[]   @relation("FK_TournamentDiscipline_TournamentTournamentDiscipline")
}

enum TournamentStatus {
  OPENING
  OPENING_FOR_REGISTRATION
  DRAWING
  ON_GOING
  FINISHED
}

model TournamentDiscipline {
  id                   String              @id @default(uuid())
  tournamentDiscipline BadmintonDiscipline
  fromAge              Int                 @default(6)
  toAge                Int                 @default(90)
  winningPoint         Int                 @default(21)
  lastPoint            Int                 @default(31)
  numberOfSets         Int                 @default(3)

  tournamentId          String
  tournament            Tournament               @relation(name: "FK_TournamentDiscipline_TournamentTournamentDiscipline", fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamenRegistration TournamentRegistration[] @relation("FK_TournamentRegistration_TournamentRegistrationTournamentDiscipline")
}

enum BadmintonDiscipline {
  MENS_SINGLE
  WOMEN_SINGLE
  MENS_DOUBLE
  WOMENS_DOUBLE
  MIXED_DOUBLE
}

model TournamentRegistration {
  id                     String               @id @default(uuid())
  tournamentId           String
  userId                 String
  tournamentDisciplineId String // "SINGLE" or "DOUBLE"
  tournamentDiscipline   TournamentDiscipline @relation(name: "FK_TournamentRegistration_TournamentRegistrationTournamentDiscipline", fields: [tournamentDisciplineId], references: [id], onDelete: Cascade)
  partnerId              String? // Nullable: Used only for doubles
  status                 String               @default("PENDING") // "PENDING", "APPROVED", "REJECTED"
  rejectionId            String?
  createdAt              DateTime             @default(now())
  tournament             Tournament           @relation("FK_TournamentRegistration_Tournament", fields: [tournamentId], references: [id], onDelete: Cascade)
  user                   User                 @relation("FK_TournamentRegistration_User", fields: [userId], references: [id], onDelete: Cascade)
  partner                User?                @relation("FK_TournamentRegistration_Partner", fields: [partnerId], references: [id], onDelete: SetNull)
  rejection              Rejection?           @relation("FK_TournamentRegistration_Rejection")
  fromTeamId             String?
  fromTeam               Team?                @relation(name: "FK_TournamentPRegistration_TournamentRegistrationTeam", fields: [fromTeamId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, userId, tournamentDisciplineId]) // Ensure a user can register only once per event type
  @@unique([tournamentId, partnerId]) // Ensure a unique pair for doubles
}

model TournamentPost {
  id              String         @id @default(uuid())
  tournamentId    String
  createdAt       DateTime
  createdByUserId String
  updatedAt       DateTime
  updatedByUserId String
  content         String
  backgroundImage String
  contentImages   ContentImage[] @relation("FK_ContentImage_TournamentPostContentImage")
  tournament      Tournament     @relation("FK_TournamentPost_TournamentPostTournament", fields: [tournamentId], references: [id], onDelete: Cascade)
}

model Rejection {
  id                       String                  @id @default(uuid())
  userVerificationId       String?                 @unique // Can be null if rejection is for tournament
  tournamentRegistrationId String?                 @unique // Can be null if rejection is for verification
  reason                   String // Explanation for rejection
  type                     String
  createdAt                DateTime                @default(now())
  userVerification         UserVerification?       @relation("FK_UserVerification_Rejection", fields: [userVerificationId], references: [id], onDelete: Cascade)
  tournamentRegistration   TournamentRegistration? @relation("FK_TournamentRegistration_Rejection", fields: [tournamentRegistrationId], references: [id])
}

model ContentImage {
  id          String         @id @default(uuid())
  imageUrl    String
  contentId   String
  postContent TournamentPost @relation("FK_ContentImage_TournamentPostContentImage", fields: [contentId], references: [id], onDelete: Cascade)
}

model Package {
  id            String     @id @default(uuid())
  packageName   String
  packageDetail String
  price         Int
  credits       Int
  cartItems     CartItem[] @relation("FK_CartItem_PackageCartItem")
}

model TransactionType {
  id              String        @id @default(uuid())
  transactionName String
  transactions    Transaction[] @relation("FK_Transaction_TransactionTransactionType")
}

model Transaction {
  id                String            @id @default(uuid())
  transactionDetail String
  userId            String
  user              User              @relation(name: "FK_Transaction_UserTransaction", fields: [userId], references: [id], onDelete: Cascade)
  transactionTypeId String
  transactionType   TransactionType   @relation(name: "FK_Transaction_TransactionTransactionType", fields: [transactionTypeId], references: [id], onDelete: Cascade)
  value             Int
  cartId            String
  cart              Cart              @relation(name: "FK_Transaction_TransactionCart", fields: [cartId], references: [id], onDelete: Cascade)
  status            TransactionStatus
  cancelledReason   String?
}

enum TransactionStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

model CartItem {
  id        String  @id @default(uuid())
  packageId String
  package   Package @relation(name: "FK_CartItem_PackageCartItem", fields: [packageId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String
  cart      Cart    @relation(name: "FK_CartItem_CartItemCart", fields: [cartId], references: [id], onDelete: Cascade)
}

model Cart {
  id           String        @id @default(uuid())
  total        Int
  cartItems    CartItem[]    @relation("FK_CartItem_CartItemCart")
  transactions Transaction[] @relation("FK_Transaction_TransactionCart")
  cartStatus   CartStatus
}

enum CartStatus {
  PAID
  PENDING
  FAILED
}
