generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Hands {
  LEFT
  RIGHT
}

model User {
  id                            String                   @id @default(uuid())
  email                         String                   @unique
  password                      String
  name                          String
  phoneNumber                   String                   @unique
  avatarURL                     String?
  currentRefreshToken           String?
  creditsRemain                 Int?
  otp                           String?
  otpExpiresTime                DateTime?
  isVerified                    Boolean                  @default(false)
  teamId                        String?
  height                        Int?
  hands                         Hands?
  dateOfBirth                   DateTime?
  teamLeaderOf                  Team[]                   @relation("FK_User_TeamLeader")
  tournaments                   Tournament[]             @relation(name: "FK_Tournament_User")
  userRoles                     UserRole[]               @relation(name: "FK_User_UserRole")
  userTeams                     UserTeam[]               @relation(name: "FK_User_UserTeam")
  verifications                 UserVerification[]       @relation(name: "FK_User_UserVerification")
  transactions                  Transaction[]            @relation(name: "FK_Transaction_UserTransaction")
  notifications                 UserNotification[]       @relation(name: "FK_UserNotification_User")
  tournamentRegistrations       TournamentRegistration[] @relation(name: "FK_TournamentRegistration_User")
  tournamentRegistrationPartner TournamentRegistration[] @relation(name: "FK_TournamentRegistration_Partner")
  tournamentParticipants        TournamentParticipants[] @relation(name: "FK_TournamentParticipants_User")
  tournamentParticipantsPartner TournamentParticipants[] @relation(name: "FK_TournamentParticipants_Partner")
  teamInvitation                TeamInvitation[]         @relation("FK_User_TeamInvitation")
  Reason                        Reason[]                 @relation("FK_TeamMember_Reason")
  TeamRequest                   TeamRequest[]            @relation("FK_TeamMember_TeamRequest")
}

model UserVerification {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation("FK_User_UserVerification", fields: [userId], references: [id])
  IDCardFront  String?
  IDCardBack   String?
  cardPhoto    String?
  role         String
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  rejectReason Reason?  @relation("FK_UserVerification_Reason")
}

model Role {
  id              String           @id @default(uuid())
  roleName        String
  rolePermissions RolePermission[] @relation("FK_Role_RolePermission")
  userRoles       UserRole[]       @relation("FK_Role_UserRole")
}

model UserRole {
  userId String
  roleId String
  role   Role   @relation("FK_Role_UserRole", fields: [roleId], references: [id])
  user   User   @relation("FK_User_UserRole", fields: [userId], references: [id])

  @@id([userId, roleId])
}

model Permission {
  id              String           @id @default(uuid())
  name            String
  rolePermissions RolePermission[] @relation("FK_Permission_RolePermission")
}

model RolePermission {
  roleId       String
  permissionId String
  permission   Permission @relation("FK_Permission_RolePermission", fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation("FK_Role_RolePermission", fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model Team {
  id                     String                   @id @default(uuid())
  teamName               String
  description            String?
  logo                   String?
  status                 TeamStatus               @default(ACTIVE)
  teamLeaderId           String
  teamLeader             User                     @relation("FK_User_TeamLeader", fields: [teamLeaderId], references: [id], onDelete: Cascade)
  userTeams              UserTeam[]               @relation("FK_Team_UserTeam")
  tournamentRegistration TournamentRegistration[] @relation("FK_TournamentPRegistration_TournamentRegistrationTeam")
  invitations            TeamInvitation[]         @relation("FK_Team_TeamInvitation")
  Reason                 Reason[]                 @relation("FK_Team_Reason")
  TeamRequest            TeamRequest[]            @relation("FK_Team_TeamRequest")
}

enum TeamStatus {
  ACTIVE
  INACTIVE
  WAITING_DISBAND
}

model UserTeam {
  userId String
  teamId String
  team   Team   @relation("FK_Team_UserTeam", fields: [teamId], references: [id], onDelete: Cascade)
  user   User   @relation("FK_User_UserTeam", fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
}

model TeamInvitation {
  id            String           @id @default(uuid())
  teamId        String
  invitedUserId String
  status        InvitationStatus @default(PENDING)

  team         Team           @relation("FK_Team_TeamInvitation", fields: [teamId], references: [id], onDelete: Cascade)
  invitedUser  User           @relation("FK_User_TeamInvitation", fields: [invitedUserId], references: [id], onDelete: Cascade)
  notification Notification[] @relation("FK_TeamInvitation_Notification")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model NotificationType {
  id                 String         @id @default(uuid())
  typeOfNotification String
  notifications      Notification[] @relation("FK_Notification_NotificationType")
}

model Notification {
  id                       String                  @id @default(uuid())
  title                    String
  message                  String
  typeId                   String
  type                     NotificationType        @relation("FK_Notification_NotificationType", fields: [typeId], references: [id], onDelete: Cascade)
  userNotification         UserNotification[]      @relation("FK_UserNotification_Notification")
  teamInvitationId         String?
  teamInvitation           TeamInvitation?         @relation("FK_TeamInvitation_Notification", fields: [teamInvitationId], references: [id], onDelete: Cascade)
  teamRequestId            String?
  teamRequest              TeamRequest?            @relation("FK_TeamRequest_Notification", fields: [teamRequestId], references: [id], onDelete: Cascade)
  tournamentRegistrationId String?
  tournamentRegistration   TournamentRegistration? @relation("FK_TournamentRegistration_Notification", fields: [tournamentRegistrationId], references: [id], onDelete: Cascade)
}

model UserNotification {
  id             String       @id @default(uuid())
  userId         String
  notificationId String
  user           User         @relation(name: "FK_UserNotification_User", fields: [userId], references: [id], onDelete: Cascade)
  notification   Notification @relation(name: "FK_UserNotification_Notification", fields: [notificationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())

  @@unique([userId, notificationId])
}

model TournamentSerie {
  id                      String       @id @default(uuid())
  tournamentSerieName     String
  serieBackgroundImageURL String
  tournaments             Tournament[] @relation(name: "FK_Tournament_TournamentSerie")
}

model Tournament {
  id                       String                   @id
  name                     String
  shortName                String?
  description              String
  organizerId              String
  contactPhone             String
  contactEmail             String
  mainColor                String?
  backgroundTournament     String
  location                 String
  registrationOpeningDate  DateTime
  registrationClosingDate  DateTime
  drawDate                 DateTime
  startDate                DateTime
  endDate                  DateTime
  checkInBeforeStart       DateTime
  umpirePerMatch           Int
  registrationFeePerPerson Int
  registrationFeePerPair   Int?
  maxEventPerPerson        Int
  status                   TournamentStatus
  protestFeePerTime        Int
  prizePool                Int
  hasMerchandise           Boolean
  numberOfMerchandise      Int?
  merchandiseImages        String[]                 @default([])
  requiredAttachment       String[]
  isRecruit                Boolean
  isPrivate                Boolean
  isRegister               Boolean
  isLiveDraw               Boolean
  hasLiveStream            Boolean
  tournamentSerieId        String
  tournamentSerie          TournamentSerie          @relation(name: "FK_Tournament_TournamentSerie", fields: [tournamentSerieId], references: [id], onDelete: Cascade)
  organizer                User                     @relation(name: "FK_Tournament_User", fields: [organizerId], references: [id], onDelete: Cascade)
  tournamentPosts          TournamentPost[]         @relation(name: "FK_TournamentPost_Tournament")
  registrations            TournamentRegistration[] @relation(name: "FK_TournamentRegistration_Tournament")
  tournamentEvents         TournamentEvent[]        @relation(name: "FK_Tournament_TournamentEvent")
  TournamentParticipants   TournamentParticipants[] @relation(name: "FK_TournamentParticipants_Tournament")
}

enum TournamentStatus {
  CREATED
  OPENING
  OPENING_FOR_REGISTRATION
  DRAWING
  ON_GOING
  FINISHED
}

model TournamentEvent {
  id                     String                   @id @default(uuid())
  tournamentEvent        BadmintonParticipantType
  fromAge                Int?                     @default(6)
  toAge                  Int?                     @default(90)
  winningPoint           Int?                     @default(21)
  lastPoint              Int                      @default(31)
  numberOfGames          Int                      @default(3)
  typeOfFormat           TypeOfFormat
  ruleOfEventExtension   String?
  minimumAthlete         Int
  maximumAthlete         Int?
  championshipPrize      String[]
  runnerUpPrize          String[]
  thirdPlacePrize        String[]                 @default([])
  jointThirdPlacePrize   String[]                 @default([])
  tournamentId           String
  tournament             Tournament               @relation(name: "FK_Tournament_TournamentEvent", fields: [tournamentId], references: [id], onDelete: Cascade)
  tournamentRegistration TournamentRegistration[] @relation(name: "FK_TournamentRegistration_TournamentEvent")
  TournamentParticipants TournamentParticipants[] @relation(name: "FK_TournamentParticipants_TournamentEvent")
}

enum TypeOfFormat {
  SINGLE_ELIMINATION
  ROUND_ROBIN
}

enum BadmintonParticipantType {
  MENS_SINGLE
  WOMEN_SINGLE
  MENS_DOUBLE
  WOMENS_DOUBLE
  MIXED_DOUBLE
}

model TournamentRegistration {
  id                          String                       @id @default(uuid())
  tournamentId                String
  userId                      String?
  tournamentEventId           String
  tournamentEvent             TournamentEvent?             @relation(name: "FK_TournamentRegistration_TournamentEvent", fields: [tournamentEventId], references: [id], onDelete: Cascade)
  partnerId                   String? // Nullable: Used only for doubles
  isPayForTheRegistrationFee  Boolean                      @default(false)
  registrationDocumentCreator String[]                     @default([])
  registrationDocumentPartner String[]                     @default([])
  registrationRole            TournamentRegistrationRole
  status                      TournamentRegistrationStatus @default(PENDING) // "PENDING", "APPROVED", "REJECTED"
  createdAt                   DateTime                     @default(now())
  tournament                  Tournament?                  @relation(name: "FK_TournamentRegistration_Tournament", fields: [tournamentId], references: [id], onDelete: Cascade)
  user                        User?                        @relation(name: "FK_TournamentRegistration_User", fields: [userId], references: [id], onDelete: Cascade)
  partner                     User?                        @relation(name: "FK_TournamentRegistration_Partner", fields: [partnerId], references: [id], onDelete: SetNull)
  rejectReason                Reason?                      @relation(name: "FK_TournamentRegistration_Reason")
  fromTeamId                  String?
  fromTeam                    Team?                        @relation(name: "FK_TournamentPRegistration_TournamentRegistrationTeam", fields: [fromTeamId], references: [id], onDelete: Cascade)
  reasonId                    String?                      @unique
  Notification                Notification[]               @relation(name: "FK_TournamentRegistration_Notification")

  @@unique([tournamentId, userId, tournamentEventId]) // Ensure a user can register only once per event type
  @@unique([tournamentId, partnerId]) // Ensure a unique pair for doubles
}

model TournamentParticipants {
  id                String          @id @default(uuid())
  tournamentId      String
  userId            String
  user              User            @relation("FK_TournamentParticipants_User", fields: [userId], references: [id], onDelete: Cascade)
  tournamentEventId String
  partnerId         String?
  partner           User?           @relation("FK_TournamentParticipants_Partner", fields: [partnerId], references: [id], onDelete: SetNull)
  tournamentEvent   TournamentEvent @relation(name: "FK_TournamentParticipants_TournamentEvent", fields: [tournamentEventId], references: [id], onDelete: Cascade)
  tournament        Tournament      @relation(name: "FK_TournamentParticipants_Tournament", fields: [tournamentId], references: [id], onDelete: Cascade)
}

enum TournamentRegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TournamentRegistrationRole {
  ATHLETE
  UMPIRE
}

model TournamentPost {
  id              String         @id @default(uuid())
  tournamentId    String
  createdAt       DateTime
  createdByUserId String
  updatedAt       DateTime
  updatedByUserId String
  content         String
  backgroundImage String
  contentImages   ContentImage[] @relation("FK_ContentImage_TournamentPostContentImage")
  tournament      Tournament     @relation(name: "FK_TournamentPost_Tournament", fields: [tournamentId], references: [id], onDelete: Cascade)
}

model TeamRequest {
  id              String            @id @default(uuid())
  teamMemberId    String
  teamId          String
  status          TeamRequestStatus @default(PENDING)
  type            TeamRequestType
  teamMember      User?             @relation("FK_TeamMember_TeamRequest", fields: [teamMemberId], references: [id])
  team            Team?             @relation("FK_Team_TeamRequest", fields: [teamId], references: [id])
  leaveTeamReason String?
  rejectReason    Reason?           @relation("FK_TeamRequest_Reason")
  Notification    Notification[]    @relation("FK_TeamRequest_Notification")
}

enum TeamRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TeamRequestType {
  JOIN_TEAM
  LEAVE_TEAM
  TRANSFER_TEAM_LEADER
}

model Reason {
  id                       String                  @id @default(uuid())
  userVerificationId       String?                 @unique // Can be null if rejection is for tournament
  tournamentRegistrationId String?                 @unique // Can be null if rejection is for verification
  teamRequestId            String?                 @unique
  userId                   String? // Store the user who left or was removed
  teamId                   String? // Store the team from which the user left
  reason                   String // Explanation for rejection
  status                   ReasonStatus?
  type                     ReasonType
  createdAt                DateTime                @default(now())
  userVerification         UserVerification?       @relation("FK_UserVerification_Reason", fields: [userVerificationId], references: [id], onDelete: Cascade)
  tournamentRegistration   TournamentRegistration? @relation("FK_TournamentRegistration_Reason", fields: [tournamentRegistrationId], references: [id])
  teamRequest              TeamRequest?            @relation("FK_TeamRequest_Reason", fields: [teamRequestId], references: [id])
  user                     User?                   @relation("FK_TeamMember_Reason", fields: [userId], references: [id])
  team                     Team?                   @relation("FK_Team_Reason", fields: [teamId], references: [id])
}

enum ReasonStatus {
  APPROVE
  REJECT
}

enum ReasonType {
  TOURNAMENT_REGISTRATION_REJECTION
  USER_VERIFICATION_REJECTION
  REMOVE_TEAM_MEMBER
  OUT_TEAM_REJECTION
  JOIN_TEAM_REJECTION
}

model ContentImage {
  id          String         @id @default(uuid())
  imageUrl    String
  contentId   String
  postContent TournamentPost @relation("FK_ContentImage_TournamentPostContentImage", fields: [contentId], references: [id], onDelete: Cascade)
}

model Package {
  id                      String     @id @default(uuid())
  packageName             String
  packageDetail           String
  currentDiscountByAmount Int
  price                   Int
  credits                 Int
  advantages              String[]
  isRecommended           Boolean
  isAvailable             Boolean
  cartItems               CartItem[] @relation("FK_CartItem_PackageCartItem")
}

model TransactionType {
  id              String        @id @default(uuid())
  transactionName String
  transactions    Transaction[] @relation("FK_Transaction_TransactionTransactionType")
}

model Transaction {
  id                String            @id @default(uuid())
  transactionDetail String
  userId            String
  user              User              @relation(name: "FK_Transaction_UserTransaction", fields: [userId], references: [id], onDelete: Cascade)
  transactionTypeId String
  transactionType   TransactionType   @relation(name: "FK_Transaction_TransactionTransactionType", fields: [transactionTypeId], references: [id], onDelete: Cascade)
  value             Int
  cartId            String
  cart              Cart              @relation(name: "FK_Transaction_TransactionCart", fields: [cartId], references: [id], onDelete: Cascade)
  status            TransactionStatus
  cancelledReason   String?
}

enum TransactionStatus {
  PENDING
  SUCCESSFUL
  FAILED
}

model CartItem {
  id        String  @id @default(uuid())
  packageId String
  package   Package @relation(name: "FK_CartItem_PackageCartItem", fields: [packageId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String
  cart      Cart    @relation(name: "FK_CartItem_CartItemCart", fields: [cartId], references: [id], onDelete: Cascade)
}

model Cart {
  id           String        @id @default(uuid())
  total        Int
  cartItems    CartItem[]    @relation("FK_CartItem_CartItemCart")
  transactions Transaction[] @relation("FK_Transaction_TransactionCart")
  cartStatus   CartStatus
}

enum CartStatus {
  PAID
  PENDING
  FAILED
}
